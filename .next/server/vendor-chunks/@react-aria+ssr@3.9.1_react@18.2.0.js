/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@react-aria+ssr@3.9.1_react@18.2.0";
exports.ids = ["vendor-chunks/@react-aria+ssr@3.9.1_react@18.2.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@react-aria+ssr@3.9.1_react@18.2.0/node_modules/@react-aria/ssr/dist/main.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@react-aria+ssr@3.9.1_react@18.2.0/node_modules/@react-aria/ssr/dist/main.js ***!
  \*********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var $32tCg$react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction $parcel$export(e, n, v, s) {\n    Object.defineProperty(e, n, {\n        get: v,\n        set: s,\n        enumerable: true,\n        configurable: true\n    });\n}\nfunction $parcel$interopDefault(a) {\n    return a && a.__esModule ? a.default : a;\n}\n$parcel$export(module.exports, \"SSRProvider\", ()=>$97d95f6660b1bb14$export$9f8ac96af4b1b2ae);\n$parcel$export(module.exports, \"useSSRSafeId\", ()=>$97d95f6660b1bb14$export$619500959fc48b26);\n$parcel$export(module.exports, \"useIsSSR\", ()=>$97d95f6660b1bb14$export$535bd6ca7f90a273);\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is\n// guarded by a check that it only runs on the client side.\n// eslint-disable-next-line rulesdir/useLayoutEffectRule\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nconst $97d95f6660b1bb14$var$defaultContext = {\n    prefix: String(Math.round(Math.random() * 10000000000)),\n    current: 0\n};\nconst $97d95f6660b1bb14$var$SSRContext = /*#__PURE__*/ (0, $parcel$interopDefault($32tCg$react)).createContext($97d95f6660b1bb14$var$defaultContext);\nconst $97d95f6660b1bb14$var$IsSSRContext = /*#__PURE__*/ (0, $parcel$interopDefault($32tCg$react)).createContext(false);\n// This is only used in React < 18.\nfunction $97d95f6660b1bb14$var$LegacySSRProvider(props) {\n    let cur = (0, $32tCg$react.useContext)($97d95f6660b1bb14$var$SSRContext);\n    let counter = $97d95f6660b1bb14$var$useCounter(cur === $97d95f6660b1bb14$var$defaultContext);\n    let [isSSR, setIsSSR] = (0, $32tCg$react.useState)(true);\n    let value = (0, $32tCg$react.useMemo)(()=>({\n            // If this is the first SSRProvider, start with an empty string prefix, otherwise\n            // append and increment the counter.\n            prefix: cur === $97d95f6660b1bb14$var$defaultContext ? \"\" : `${cur.prefix}-${counter}`,\n            current: 0\n        }), [\n        cur,\n        counter\n    ]);\n    // If on the client, and the component was initially server rendered,\n    // then schedule a layout effect to update the component after hydration.\n    if (typeof document !== \"undefined\") // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    (0, $32tCg$react.useLayoutEffect)(()=>{\n        setIsSSR(false);\n    }, []);\n    return /*#__PURE__*/ (0, $parcel$interopDefault($32tCg$react)).createElement($97d95f6660b1bb14$var$SSRContext.Provider, {\n        value: value\n    }, /*#__PURE__*/ (0, $parcel$interopDefault($32tCg$react)).createElement($97d95f6660b1bb14$var$IsSSRContext.Provider, {\n        value: isSSR\n    }, props.children));\n}\nlet $97d95f6660b1bb14$var$warnedAboutSSRProvider = false;\nfunction $97d95f6660b1bb14$export$9f8ac96af4b1b2ae(props) {\n    if (typeof (0, $parcel$interopDefault($32tCg$react))[\"useId\"] === \"function\") {\n        if ( true && !$97d95f6660b1bb14$var$warnedAboutSSRProvider) {\n            console.warn(\"In React 18, SSRProvider is not necessary and is a noop. You can remove it from your app.\");\n            $97d95f6660b1bb14$var$warnedAboutSSRProvider = true;\n        }\n        return /*#__PURE__*/ (0, $parcel$interopDefault($32tCg$react)).createElement((0, $parcel$interopDefault($32tCg$react)).Fragment, null, props.children);\n    }\n    return /*#__PURE__*/ (0, $parcel$interopDefault($32tCg$react)).createElement($97d95f6660b1bb14$var$LegacySSRProvider, props);\n}\nlet $97d95f6660b1bb14$var$canUseDOM = Boolean( false && 0);\nlet $97d95f6660b1bb14$var$componentIds = new WeakMap();\nfunction $97d95f6660b1bb14$var$useCounter(isDisabled = false) {\n    let ctx = (0, $32tCg$react.useContext)($97d95f6660b1bb14$var$SSRContext);\n    let ref = (0, $32tCg$react.useRef)(null);\n    // eslint-disable-next-line rulesdir/pure-render\n    if (ref.current === null && !isDisabled) {\n        var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        // In strict mode, React renders components twice, and the ref will be reset to null on the second render.\n        // This means our id counter will be incremented twice instead of once. This is a problem because on the\n        // server, components are only rendered once and so ids generated on the server won't match the client.\n        // In React 18, useId was introduced to solve this, but it is not available in older versions. So to solve this\n        // we need to use some React internals to access the underlying Fiber instance, which is stable between renders.\n        // This is exposed as ReactCurrentOwner in development, which is all we need since StrictMode only runs in development.\n        // To ensure that we only increment the global counter once, we store the starting id for this component in\n        // a weak map associated with the Fiber. On the second render, we reset the global counter to this value.\n        // Since React runs the second render immediately after the first, this is safe.\n        // @ts-ignore\n        let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (0, $parcel$interopDefault($32tCg$react)).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;\n        if (currentOwner) {\n            let prevComponentValue = $97d95f6660b1bb14$var$componentIds.get(currentOwner);\n            if (prevComponentValue == null) $97d95f6660b1bb14$var$componentIds.set(currentOwner, {\n                id: ctx.current,\n                state: currentOwner.memoizedState\n            });\n            else if (currentOwner.memoizedState !== prevComponentValue.state) {\n                // On the second render, the memoizedState gets reset by React.\n                // Reset the counter, and remove from the weak map so we don't\n                // do this for subsequent useId calls.\n                ctx.current = prevComponentValue.id;\n                $97d95f6660b1bb14$var$componentIds.delete(currentOwner);\n            }\n        }\n        // eslint-disable-next-line rulesdir/pure-render\n        ref.current = ++ctx.current;\n    }\n    // eslint-disable-next-line rulesdir/pure-render\n    return ref.current;\n}\nfunction $97d95f6660b1bb14$var$useLegacySSRSafeId(defaultId) {\n    let ctx = (0, $32tCg$react.useContext)($97d95f6660b1bb14$var$SSRContext);\n    // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n    // provide a warning to hint to the developer to add one.\n    if (ctx === $97d95f6660b1bb14$var$defaultContext && !$97d95f6660b1bb14$var$canUseDOM) console.warn(\"When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.\");\n    let counter = $97d95f6660b1bb14$var$useCounter(!!defaultId);\n    let prefix = ctx === $97d95f6660b1bb14$var$defaultContext && \"development\" === \"test\" ? 0 : `react-aria${ctx.prefix}`;\n    return defaultId || `${prefix}-${counter}`;\n}\nfunction $97d95f6660b1bb14$var$useModernSSRSafeId(defaultId) {\n    // @ts-ignore\n    let id = (0, $parcel$interopDefault($32tCg$react)).useId();\n    let [didSSR] = (0, $32tCg$react.useState)($97d95f6660b1bb14$export$535bd6ca7f90a273());\n    let prefix = didSSR || \"development\" === \"test\" ? \"react-aria\" : `react-aria${$97d95f6660b1bb14$var$defaultContext.prefix}`;\n    return defaultId || `${prefix}-${id}`;\n}\nconst $97d95f6660b1bb14$export$619500959fc48b26 = typeof (0, $parcel$interopDefault($32tCg$react))[\"useId\"] === \"function\" ? $97d95f6660b1bb14$var$useModernSSRSafeId : $97d95f6660b1bb14$var$useLegacySSRSafeId;\nfunction $97d95f6660b1bb14$var$getSnapshot() {\n    return false;\n}\nfunction $97d95f6660b1bb14$var$getServerSnapshot() {\n    return true;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction $97d95f6660b1bb14$var$subscribe(onStoreChange) {\n    // noop\n    return ()=>{};\n}\nfunction $97d95f6660b1bb14$export$535bd6ca7f90a273() {\n    // In React 18, we can use useSyncExternalStore to detect if we're server rendering or hydrating.\n    if (typeof (0, $parcel$interopDefault($32tCg$react))[\"useSyncExternalStore\"] === \"function\") return (0, $parcel$interopDefault($32tCg$react))[\"useSyncExternalStore\"]($97d95f6660b1bb14$var$subscribe, $97d95f6660b1bb14$var$getSnapshot, $97d95f6660b1bb14$var$getServerSnapshot);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return (0, $32tCg$react.useContext)($97d95f6660b1bb14$var$IsSSRContext);\n} //# sourceMappingURL=main.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@react-aria+ssr@3.9.1_react@18.2.0/node_modules/@react-aria/ssr/dist/main.js\n");

/***/ })

};
;